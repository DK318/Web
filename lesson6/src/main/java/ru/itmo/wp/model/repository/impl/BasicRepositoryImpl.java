package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BasicRepositoryImpl<T> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    protected Object abstractSelectQuery(String query, List<Object> args,
                                         CheckedBiFunction<ResultSetMetaData, ResultSet, Object> function) {
        return abstractQuery(query, null, args, this::selectBody, function);
    }

    private Object selectBody(PreparedStatement statement, T obj, List<Object> args,
                              CheckedBiFunction<ResultSetMetaData, ResultSet, Object> function) throws SQLException {
        if (args != null) {
            for (int i = 0; i < args.size(); i++) {
                statement.setObject(i + 1, args.get(i));
            }
        }

        try (ResultSet resultSet = statement.executeQuery()) {
            return function.apply(statement.getMetaData(), resultSet);
        }
    }

    private Object insertBody(PreparedStatement statement, T obj, List<Object> args,
                              CheckedBiFunction<ResultSetMetaData, ResultSet, Object> function) throws SQLException {
        makeStatement(statement, obj, args);
        if (statement.executeUpdate() != 1) {
            throw new RepositoryException("Can't save object.");
        } else {
            ResultSet generatedKeys = statement.getGeneratedKeys();
            if (generatedKeys.next()) {
                setGeneratedFields(obj, generatedKeys);
            } else {
                throw new RepositoryException("Can't save object [no autogenerated fields].");
            }
        }
        return null;
    }

    private Object abstractQuery(String query, T obj, List<Object> args,
                                 CheckedQuadFunction<PreparedStatement, T, List<Object>,
                                 CheckedBiFunction<ResultSetMetaData, ResultSet, Object>, Object> function, CheckedBiFunction<ResultSetMetaData, ResultSet, Object> evalFunction) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
                return function.apply(statement, obj, args, evalFunction);
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find object", e);
        }
    }

    protected void abstractInsertQuery(String query, T obj, List<Object> args) {
        abstractQuery(query, obj, args, this::insertBody, null);
    }

    protected abstract T toObject(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;

    protected abstract void makeStatement(PreparedStatement statement, T obj, List<Object> args) throws SQLException;

    protected abstract void setGeneratedFields(T obj, ResultSet generatedKeys) throws SQLException;

    protected List<T> addAll(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        List<T> objs = new ArrayList<>();
        T obj;
        while ((obj = toObject(metaData, resultSet)) != null) {
            objs.add(obj);
        }
        return objs;
    }

    @FunctionalInterface
    protected interface CheckedBiFunction<T, U, R> {
        R apply(T x, U y) throws SQLException;
    }

    @FunctionalInterface
    protected interface CheckedQuadFunction<T, U, P, S, R> {
        R apply(T x, U y, P z, S a) throws SQLException;
    }
}
